#! /usr/bin/env python

from __future__ import absolute_import, division, print_function

import os
import argparse

from fabric import Setup, load_effect_scores_series, analyze_maf_genes
from fabric.maf_mutation_loader import load_relevant_mutations
from fabric.common_args import get_parser_file_type, get_parser_directory_type, get_common_args

if __name__ == '__main__':

    parser = argparse.ArgumentParser(description = 'Run a full analysis on a .maf dataset, calculating the alteration bias in each gene independently ' + \
            '(optionally for each cancer type).', parents = [get_common_args()])
    parser.add_argument('--maf-file', dest = 'maf_file_path', metavar = '/path/to/file.maf', type = get_parser_file_type(parser, must_exist = True), \
            required = True, help = 'Path to the .maf input file with the mutations to analyze.')
    parser.add_argument('--effect-scores-csv-file', dest = 'effect_scores_csv_file_path', metavar = '/path/to/effect_scores_file.csv', \
            type = get_parser_file_type(parser, must_exist = True), required = True, help = 'Path to the CSV file with the gene effect scores (the ' + \
            'output of the set_maf_gene_effect_scores script).')
    parser.add_argument('--gene-bg-scores-dir', dest = 'gene_bg_scores_dir', metavar = '/path/to/gene_bg_scores_dir', \
            type = get_parser_directory_type(parser), required = True, help = 'Path to the directory of the gene background scores (after running the ' + \
            'script set_gene_bg_scores for the relevant reference genome).')
    parser.add_argument('--output-dir', dest = 'output_dir', metavar = '/path/to/output_dir', \
            type = get_parser_directory_type(parser, create_if_not_exists = True), required = True, help = 'The directory where the analysis output ' + \
            'files will be saved. Will create the directory if it doesn\'t exist.')
    parser.add_argument('--override', dest = 'override', action = 'store_true', help = 'Allow an unempty output directory (and override files within ' + \
            'it if necessary). If this flag is not provided, the output directory must be empty.')
    parser.add_argument('--only-combined', dest = 'only_combined', action = 'store_true', help = 'Run only a combined analysis, regardless of the ' + \
            'mutations\' project. If this flag is not provided, will also run an independent analysis for each project. The projects are determined by ' + \
            'the "tcga_project" column in the MAF file.')
    parser.add_argument('--analyze-diff', dest = 'analyze_diff', action = 'store_true', help = 'Also analyze the difference in alteration bias among ' + \
            'projects, resulting an additional output file (diff.csv). If the flag --only-combined is on, this flag is not allowed.')
    parser.add_argument('--only-gene-indices', dest = 'only_gene_indices', metavar = '[<index1>, <index2>, ...]', nargs = '+', type = int, \
            help = 'Limit the analysis only to the provided genes (identified by their index according to the gene dataset file). If not provided, will ' + \
            'analyze all genes.')
    args = parser.parse_args()
    
    if args.only_combined and args.analyze_diff:
        parser.error('The flag --analyze-diff is not allowed when the flag --only-combined is on.')
    
    if not args.override and len(os.listdir(args.output_dir)) > 0:
        parser.error('Output directory is not empty: %s. Consider using the --override flag.' % args.output_dir)
        
    setup = Setup(args.ref_genome, gene_dataset_dir = args.gene_dataset_dir)
    
    mutations = load_relevant_mutations(args.maf_file_path)
    mutations['effect_scores'] = load_effect_scores_series(args.effect_scores_csv_file_path)
        
    results_per_project = analyze_maf_genes(setup, args.gene_bg_scores_dir, mutations, only_combined_project = args.only_combined, \
            analyze_diff = args.analyze_diff, gene_indices_to_analyze = args.only_gene_indices)
    
    for project, results in results_per_project.items():
        results.to_csv(os.path.join(args.output_dir, '%s.csv' % project))
    
    print('Done.')
