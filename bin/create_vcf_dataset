#! /usr/bin/env python

from __future__ import absolute_import, division, print_function

import os
import gzip
import argparse

from fabric import Setup, calc_effect_scores_of_snps
from fabric.util import TimeMeasure
from fabric.common_args import get_parser_file_type, get_common_args, create_thread_pool
from fabric.vcf_processing import extract_variants, filter_snps, process_snps

if __name__ == '__main__':

    parser = argparse.ArgumentParser(description = 'Create a dataset of SNPs (with effect scores) from a VCF file.', parents = \
            [get_common_args(n_threads = True)])
    parser.add_argument('--vcf-file', dest = 'vcf_file_path', metavar = '/path/to/file.vcf[.gz]', type = get_parser_file_type(parser, must_exist = True), \
            required = True, help = 'Path to the .vcf[.gz] input file with the variants to process and calculate the effect scores for.')
    parser.add_argument('--only-pass', dest = 'only_pass', action = 'store_true', help = 'Filter out variants with a FILTER VCF field that ' + \
            'is different than "pass".')
    parser.add_argument('--min-AF', dest = 'min_AF', metavar = '<0-1 number>', type = float, default = 0, \
            help = 'Take only variants in the VCF with an Allele Frequency (AF) that is greater or higher than this number. Default is 0 (i.e. no filter).')
    parser.add_argument('--output-csv-file', dest = 'output_csv_file', metavar = '/path/to/output_file.csv', type = get_parser_file_type(parser), \
            required = True, help = 'Path to the CSV output file where the created dataset will be saved.')
    parser.add_argument('--override', dest = 'override', action = 'store_true', help = 'Override the output file if it already exists.')
    args = parser.parse_args()
        
    if not args.override and os.path.exists(args.output_csv_file):
        parser.error(('Output file already exists: %s' % args.output_csv_file) + '\n' + 'Use the --override flag if you want to override it.')
    
    n_threads, thread_pool = create_thread_pool(args)

    try:
        
        setup = Setup(args.ref_genome, gene_dataset_dir = args.gene_dataset_dir, thread_pool = thread_pool, n_threads = n_threads)
        
        with TimeMeasure('Parsing VCF variants...'):
        
            vcf_open_function = gzip.open if args.vcf_file_path.endswith('.gz') else open
        
            with vcf_open_function(args.vcf_file_path, 'r') as f:
                variants_df = extract_variants(f, only_pass = args.only_pass, min_AF = args.min_AF)
        
        snps_df = filter_snps(variants_df)
        
        with TimeMeasure('Processing %d SNPs...' % len(snps_df)):
            snps_series = process_snps(snps_df, setup)
        
        snps_df['effect_scores'] = calc_effect_scores_of_snps(snps_series, setup)
        snps_df.to_csv(args.output_csv_file, index = False)
    finally:
        thread_pool.close()
    
    print('Done.')
