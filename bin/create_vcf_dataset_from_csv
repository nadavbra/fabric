#! python

from __future__ import absolute_import, division, print_function

import os
import argparse

import pandas as pd

from fabric import Setup, calc_effect_scores_of_snps
from fabric.util import TimeMeasure
from fabric.common_args import get_parser_file_type, get_common_args, create_thread_pool
from fabric.vcf_processing import filter_snps, process_snps

if __name__ == '__main__':

    parser = argparse.ArgumentParser(description = 'Create a dataset of SNPs (with effect scores) from a CSV file containing the ' + \
            'same information as a VCF file.', parents = [get_common_args(n_threads = True)])
    parser.add_argument('--csv-file', dest = 'csv_file_path', metavar = '/path/to/file.csv[.gz]', type = get_parser_file_type(parser, must_exist = True), \
            required = True, help = 'Path to the .csv[.gz] input file with the variants to calculate the effect scores for.')
    parser.add_argument('--output-csv-file', dest = 'output_csv_file', metavar = '/path/to/output_file.csv', type = get_parser_file_type(parser), \
            required = True, help = 'Path to the CSV output file where the created dataset will be saved.')
    parser.add_argument('--override', dest = 'override', action = 'store_true', help = 'Override the output file if it already exists.')
    args = parser.parse_args()
        
    if not args.override and os.path.exists(args.output_csv_file):
        parser.error(('Output file already exists: %s' % args.output_csv_file) + '\n' + 'Use the --override flag if you want to override it.')
    
    n_threads, thread_pool = create_thread_pool(args)

    try:
        
        setup = Setup(args.ref_genome, gene_dataset_dir = args.gene_dataset_dir, thread_pool = thread_pool, n_threads = n_threads)
        
        with TimeMeasure('Reading variants...'):
            variants_df = pd.read_csv(args.csv_file_path).rename(columns = lambda column_name: column_name.lower())
            variants_df['chrom'] = variants_df['chrom'].astype(str)
        
        snps_df = filter_snps(variants_df)
        
        with TimeMeasure('Processing %d SNPs...' % len(snps_df)):
            snps_series = process_snps(snps_df, setup)
        
        snps_df['effect_scores'] = calc_effect_scores_of_snps(snps_series, setup)
        snps_df.to_csv(args.output_csv_file, index = False)
    finally:
        thread_pool.close()
    
    print('Done.')
