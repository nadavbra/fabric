#! /usr/bin/env python

from __future__ import absolute_import, division, print_function

import os
import argparse

from fabric import Setup, calc_effect_scores_of_snps
from fabric.common_args import get_parser_file_type, get_common_args, create_thread_pool
from fabric.maf_mutation_loader import load_relevant_mutations, interpret_mutations

if __name__ == '__main__':

    parser = argparse.ArgumentParser(description = 'Calculate gene effect scores of all relevant mutations within a MAF file.', \
            parents = [get_common_args(n_threads = True)])
    parser.add_argument('--maf-file', dest = 'maf_file_path', metavar = '/path/to/file.maf', \
            type = get_parser_file_type(parser, must_exist = True), required = True, help = 'Path to the .maf input file with the mutations to process ' + \
            'and calculate the effect scores for.')
    parser.add_argument('--effect-scores-output-csv-file', dest = 'effect_scores_output_csv_file_path', metavar = '/path/to/effect_scores_output_file.csv', \
            type = get_parser_file_type(parser), required = True, help = 'Path to the CSV output file where the gene effect scores will be saved.')
    parser.add_argument('--override', dest = 'override', action = 'store_true', help = 'Override the output file if it already exists.')
    args = parser.parse_args()
    
    if not args.override and os.path.exists(args.effect_scores_output_csv_file_path):
        parser.error(('Output file already exists: %s' % args.effect_scores_output_csv_file_path) + '\n' + 'Use the --override flag if you want to override it.')
    
    n_threads, thread_pool = create_thread_pool(args)
    
    try:
        
        setup = Setup(args.ref_genome, gene_dataset_dir = args.gene_dataset_dir, thread_pool = thread_pool, n_threads = n_threads)
        
        mutations = load_relevant_mutations(args.maf_file_path)
        interpret_mutations(mutations, setup)
        
        effect_scores_series = calc_effect_scores_of_snps(mutations['snp_interpretation'], setup)
        effect_scores_series.to_csv(args.effect_scores_output_csv_file_path)
    finally:
        thread_pool.close()

    print('Done.')
